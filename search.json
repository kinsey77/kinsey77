[{"title":"React结合Google地图实现地图服务（二）","url":"/2018/03/16/google-map-next/","content":"## 前言\n\b这篇文章是上一篇的修改版本，之所以会有这个修改是因为遇到一个坑。公司的的项目线上访问地址的文件\b传输协议是https,但是国内版的googled地图访问方式http://maps.google.cn/maps/api/jshv，没错它是http的，自然会出现跨域的\b问题，瞬间就掉到坑底了。\n+ <!-- more -->\n<The rest of contents | 余下全文>\n## 解决方案\n\b为了爬出这个坑，\b在资料堆了蹲了很久，最终找到了一个梯子爬了出来。\b\n废弃掉前一篇文章使用的**react-leaflet-google**插件，使用加载google瓦片地图的方式去代替原来http的请求方式。\n## 具体实现\n代码不需要大的更改，只需要修改下面部分的代码即可\n```\n<LayersControl position='topright'>\n    <BaseLayer checked name=\"road\"}>\n        <TileLayer\n        url=\"https://mt2.google.cn/vt/lyrs=m&x={x}&y={y}&z={z}\"\n        maxZoom=\"18\"\n        minZoom=\"2\"\n        />\n    </BaseLayer>\n    <BaseLayer  name=\"terrain\"}>\n        <TileLayer\n        url=\"https://mt2.google.cn/vt/lyrs=p&x={x}&y={y}&z={z}\"\n        maxZoom=\"18\"\n        minZoom=\"2\"\n        />\n    </BaseLayer>\n    <BaseLayer  name=\"satellite\"}>\n        <TileLayer\n        url=\"https://mt2.google.cn/vt/lyrs=y&x={x}&y={y}&z={z}\"\n        maxZoom=\"18\"\n        minZoom=\"2\"\n        />\n    </BaseLayer>\n    {this.renderMarker()} // 地图标记点方法，细节看上篇文章\n</LayersControl>\n```\n其实就是使用**leaflet**的Tilelayer组件去加载瓦片地图，url属性值即加载google瓦片地图的地址。其他属性设置参考**[leaflet](http://leafletjs.com/reference-1.3.0.html)** Api文档。\n这种方式的除了填了我的坑之外，还有其它的好处。第一，使用加载的地图瓦片的方式加载地图，地图展示速度明显，之前可能会出现地图瓦片加载不出来并呈灰色的情况。第二,这种方式不仅可以加载google地图，还可以加载百度，高德，甚至是其它自定义的地图等等都可以，这里甩出一个**[链接](https://segmentfault.com/a/1190000011276788)**，可以去试试。","tags":["前端"]},{"title":"React结合Google地图实现地图服务（一）","url":"/2018/02/09/google-map/","content":"## 开发背景\n所在的项目组用的前端开发框架是**React**，现在有需求要将Google地图嵌到页面中。最初的开发要求是做一个Demo，实现**Google-maps**的三个图层，根据经纬度标做出Marker标记，显示风场在地图上的分布，并实现项目的一些联动图表展示效果。\n+ <!-- more -->\n<The rest of contents | 余下全文>\n## 项目依赖\n在已有的react项目中你需要安装以下插件\n\n- **[leaflet](http://leafletjs.com/reference-1.3.0.html)**是一个为建设交互性好适用于移动设备地图的领先开源JavaScript库。\n \n- **[react-leaflet](https://react-leaflet.js.org)**是对**leaflet**库做了react语法化集成处理，更加符合react项目进行开发，并且依赖于leaflet。\n\n- **[react-leaflet-google](https://github.com/Charmatzis/react-leaflet-google)**是**react-leaflet**的一个第三方插件(这里因为项目值只需要集成Google地图服务，所以只用到react-leaflet-google这个插件。如果你有更多的需求，react-leaflet还有更多的[第三方插件](https://react-leaflet.js.org/docs/en/plugins.html)可以满足你的需求)，可以将Google地图图层嵌到leaflet地图图层中；另外你也可以不用leaflet的图层，只用Google地图。\n\n- 在使用Google地图之前你需要去官网申请一个密钥key(具体方法可看[文档](https://developers.google.cn/maps/documentation/javascript/get-api-key))，才可以使用Google地图服务,下面将会用到。\n\n``` \nnpm install leaflet react-leaglet react-leaflet-google --save\n```\n\n- 这里还有一点需要注意，除了以上插件外你还需要安装**google-maps**地图插件，否则会报错。\n\n```\nnpm install google-maps --save\n```\n\n## 项目开发\n安装好以上插件后就可以在项目里新建一个组件，粘贴下面的Demo代码,就可以看到一个简单的实例了。\n\nDemo:\n\n```\nimport React from 'react';\n\nimport {\n    Map,\n    TileLayer, \n    LayersControl, \n    Marker, \n    Popup, \n    Tooltip \n} from 'react-leaflet'\n\nimport { GoogleLayer } from 'react-leaflet-google'\n\nconst { BaseLayer } = LayersControl;\nconst key = '####'; // 这里填入你在Google地图服务申请的密钥key\n//下面是Google地图的三种类型\nconst terrain = 'TERRAIN';\nconst road = 'ROADMAP';\nconst satellite = 'SATELLITE';\n\nexport default class EnlightMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            zoom: 10\n        }\n    }\n\n    render() {\n        const center = [51.505, -0.09];\n        let styleObj = {width: '100%', height: '100%'};\n        return (\n            <Map center={center} zoom={this.state.zoom} zoomControl={true} style={styleObj}>\n                <LayersControl position='topright'>\n                    <BaseLayer checked name='Google Maps Roads'>\n                        <GoogleLayer googlekey={key}  maptype={road}/>\n                    </BaseLayer>\n                    <BaseLayer  name='Google Maps Terrain'>\n                        <GoogleLayer googlekey={key}  maptype={terrain} />\n                    </BaseLayer>\n                    <BaseLayer  name='Google Maps Satellite'>\n                        <GoogleLayer googlekey={key}  maptype={satellite} />\n                    </BaseLayer>\n                    {this.renderMarker()}\n                </LayersControl>\n            </Map>\n        );\n    }\n    renderMarker() { // 根据经纬度标记出点\n        const markers = this.props.markers || [\n            { key: 'marker1', position: [51.5, -0.1], children: 'My first popup' },\n            { key: 'marker2', position: [51.51, -0.1], children: 'My second popup' },\n            { key: 'marker3', position: [51.49, -0.05], children: 'My third popup' },\n        ];\n\n        let marker = markers.map( (col) => {\n            return (\n                <Marker position={col.position} key={col.key} >\n                    <Popup>\n                        <span>\n                        {col.children}\n                        </span>\n                    </Popup>\n                    <Tooltip>\n                        <span>{col.key}</span>\n                    </Tooltip>\n                </Marker>\n            )\n        })\n        return marker;\n    }\n}\n```\n\n## 注意事项\n\n- 因为Google是国外的，所以你访问谷歌地图需要翻墙。不过现在Google地图提供了国内版，你可以使用**[国内的访问地址](https://developers.google.cn/maps/documentation/javascript/tutorial)**去访问地图api.\n但是在哪更改这个访问地址呢？你需要在node_modules里找到**google-maps**依赖包，然后在Google.js文件里面找到**GoogleMapsLoader.URL**，将其值改为**http://maps.google.cn/maps/api/js**就可以。\n\n- 如果你想要更改Google地图的配置参数，你需要在node_modules里找到**react-leaflet-google**依赖包，然后在leaflet.google.js文件里更改options对象的参数即可，具体看上面的**[leaflet](http://leafletjs.com/reference-1.3.0.html)** Api文档。\n\n## 补充\n\n下面提供一个方法，可以根据最大经度差或者最大维度差自定义第一次加载地图时的缩放比例Zoom。\n\n```\ngetRoom(diff){ //参数为最大经度差或者维度差 \n    let room = new Array(0, 1, 2, 3, 4, 5, 6,7 , 8, 9, 10, 11, 12, 13, 14);  \n    let diffArr = new Array(360, 180, 90, 45, 22, 11, 5, 2.5, 1.25, 0.6, 0.3, 0.15, 0.07, 0.03, 0); \n    let zoom = '';\n    diffArr.some( (col, i) => { \n        if((diff - col) >= 0){ \n            zoom = room[i];\n            return true  \n        }  \n    })\n    return zoom     \n}\n```","tags":["前端"]},{"title":"Hello World","url":"/2018/02/01/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n+ <!-- more -->\n<The rest of contents | 余下全文>\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]